'use client';

import Link from 'next/link';
import { useParams } from 'next/navigation';
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

type QuizQuestion = {
  id: string;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
};

const quizQuestions: QuizQuestion[] = [
  {
    id: '1',
    question: 'What are the four forces that act on an aircraft in flight?',
    options: [
      'Lift, weight, thrust, drag',
      'Lift, gravity, power, resistance',
      'Up, down, forward, backward',
      'Pitch, roll, yaw, thrust',
    ],
    correctAnswer: 0,
    explanation: 'The four forces are lift (upward), weight (downward), thrust (forward), and drag (rearward).',
  },
  {
    id: '2',
    question: 'For steady, level flight, what must be true about the four forces?',
    options: [
      'Thrust must exceed drag',
      'Lift must exceed weight',
      'All forces must be in equilibrium',
      'Drag must be minimized',
    ],
    correctAnswer: 2,
    explanation: 'In steady, level flight, lift equals weight and thrust equals drag, creating force equilibrium.',
  },
  {
    id: '3',
    question: 'Which force opposes the motion of an aircraft through the air?',
    options: [
      'Weight',
      'Lift',
      'Thrust',
      'Drag',
    ],
    correctAnswer: 3,
    explanation: 'Drag is the force that opposes the aircraft\'s motion through the air, acting opposite to the direction of flight.',
  },
  {
    id: '4',
    question: 'What happens when lift exceeds weight in flight?',
    options: [
      'The aircraft descends',
      'The aircraft climbs',
      'The aircraft turns',
      'Nothing changes',
    ],
    correctAnswer: 1,
    explanation: 'When lift exceeds weight, there is a net upward force that causes the aircraft to climb.',
  },
  {
    id: '5',
    question: 'Which force is generated by the aircraft\'s powerplant?',
    options: [
      'Lift',
      'Weight',
      'Thrust',
      'Drag',
    ],
    correctAnswer: 2,
    explanation: 'Thrust is the forward force generated by the aircraft\'s powerplant (propeller, jet engine, etc.).',
  },
];

export default function FourForcesQuiz() {
  const params = useParams();
  const locale = params.locale as string;

  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [quizCompleted, setQuizCompleted] = useState(false);

  const handleAnswerSelect = (answerIndex: number) => {
    if (quizCompleted) {
      return;
    }

    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = answerIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNext = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResults(true);
      setQuizCompleted(true);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const calculateScore = () => {
    let correct = 0;
    quizQuestions.forEach((question, index) => {
      if (selectedAnswers[index] === question.correctAnswer) {
        correct++;
      }
    });
    return correct;
  };

  const correctAnswers = calculateScore();
  const scorePercentage = Math.round((correctAnswers / quizQuestions.length) * 100);
  const passed = scorePercentage >= 70;

  if (showResults) {
    return (
      <div className="max-w-2xl mx-auto space-y-6">
        {/* Breadcrumb Navigation */}
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Link href={`/${locale}/handbook/private-pilot`} className="hover:text-foreground">
            Private Pilot
          </Link>
          <span>‚Ä∫</span>
          <Link href={`/${locale}/handbook/private-pilot/principles-of-flight`} className="hover:text-foreground">
            Principles of Flight
          </Link>
          <span>‚Ä∫</span>
          <Link href={`/${locale}/handbook/private-pilot/principles-of-flight/four-forces`} className="hover:text-foreground">
            Four Forces
          </Link>
          <span>‚Ä∫</span>
          <span>Quiz Results</span>
        </div>

        {/* Results Header */}
        <Card className={passed ? 'bg-primary/5 border-primary/20' : 'bg-destructive/5 border-destructive/20'}>
          <CardHeader className="text-center">
            <div className={`text-6xl mb-4 ${passed ? 'text-primary' : 'text-destructive'}`}>
              {passed ? 'üéâ' : 'üìö'}
            </div>
            <CardTitle className="text-2xl">
              {passed ? 'Congratulations!' : 'Keep Studying!'}
            </CardTitle>
            <p className={`text-lg ${passed ? 'text-primary' : 'text-destructive'}`}>
              You scored
              {' '}
              {correctAnswers}
              {' '}
              out of
              {' '}
              {quizQuestions.length}
              {' '}
              (
              {scorePercentage}
              %)
            </p>
            <p className="text-muted-foreground">
              {passed
                ? 'You have successfully completed this lesson!'
                : 'You need 70% to pass. Review the content and try again.'}
            </p>
          </CardHeader>
        </Card>

        {/* Detailed Results */}
        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Review Your Answers</h2>
          {quizQuestions.map((question, index) => {
            const userAnswer = selectedAnswers[index];
            const isCorrect = userAnswer === question.correctAnswer;

            return (
              <Card key={question.id} className={isCorrect ? 'border-primary/20' : 'border-destructive/20'}>
                <CardHeader>
                  <CardTitle className="text-lg flex items-center gap-2">
                    {isCorrect
                      ? (
                          <span className="text-primary">‚úÖ</span>
                        )
                      : (
                          <span className="text-destructive">‚ùå</span>
                        )}
                    Question
                    {' '}
                    {index + 1}
                  </CardTitle>
                  <p>{question.question}</p>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="space-y-2">
                    {question.options.map((option, optionIndex) => (
                      <div
                        key={optionIndex}
                        className={`p-3 rounded-lg border text-sm ${
                          optionIndex === question.correctAnswer
                            ? 'bg-primary/10 border-primary/30 text-primary-foreground'
                            : optionIndex === userAnswer && !isCorrect
                              ? 'bg-destructive/10 border-destructive/30'
                              : 'bg-muted/30'
                        }`}
                      >
                        {option}
                        {optionIndex === question.correctAnswer && (
                          <span className="ml-2 text-primary font-medium">(Correct)</span>
                        )}
                        {optionIndex === userAnswer && !isCorrect && (
                          <span className="ml-2 text-destructive font-medium">(Your answer)</span>
                        )}
                      </div>
                    ))}
                  </div>
                  <div className="bg-muted/50 p-3 rounded-lg">
                    <p className="text-sm font-medium mb-1">Explanation:</p>
                    <p className="text-sm text-muted-foreground">{question.explanation}</p>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-3">
          <Button asChild variant="outline">
            <Link href={`/${locale}/handbook/private-pilot/principles-of-flight/four-forces`}>
              Review Lesson
            </Link>
          </Button>

          {passed
            ? (
                <Button asChild className="flex-1">
                  <Link href={`/${locale}/handbook/private-pilot/principles-of-flight/airfoil-theory`}>
                    Continue to Next Lesson ‚Üí
                  </Link>
                </Button>
              )
            : (
                <Button
                  onClick={() => {
                    setCurrentQuestion(0);
                    setSelectedAnswers([]);
                    setShowResults(false);
                    setQuizCompleted(false);
                  }}
                  className="flex-1"
                >
                  Retake Quiz
                </Button>
              )}
        </div>
      </div>
    );
  }

  const question = quizQuestions[currentQuestion];
  const progress = ((currentQuestion + 1) / quizQuestions.length) * 100;

  return (
    <div className="max-w-2xl mx-auto space-y-6">
      {/* Breadcrumb Navigation */}
      <div className="flex items-center gap-2 text-sm text-muted-foreground">
        <Link href={`/${locale}/handbook/private-pilot`} className="hover:text-foreground">
          Private Pilot
        </Link>
        <span>‚Ä∫</span>
        <Link href={`/${locale}/handbook/private-pilot/principles-of-flight`} className="hover:text-foreground">
          Principles of Flight
        </Link>
        <span>‚Ä∫</span>
        <Link href={`/${locale}/handbook/private-pilot/principles-of-flight/four-forces`} className="hover:text-foreground">
          Four Forces
        </Link>
        <span>‚Ä∫</span>
        <span>Quiz</span>
      </div>

      {/* Progress Header */}
      <div className="space-y-2">
        <div className="flex items-center justify-between text-sm">
          <span className="font-medium">Four Forces of Flight Quiz</span>
          <span className="text-muted-foreground">
            Question
            {' '}
            {currentQuestion + 1}
            {' '}
            of
            {' '}
            {quizQuestions.length}
          </span>
        </div>
        <div className="w-full bg-muted rounded-full h-2">
          <div
            className="bg-primary h-2 rounded-full transition-all duration-300"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      {/* Question Card */}
      <Card>
        <CardHeader>
          <CardTitle className="text-xl">
            {question.question}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              className={`w-full p-4 text-left rounded-lg border transition-all ${
                selectedAnswers[currentQuestion] === index
                  ? 'border-primary bg-primary/10 text-primary-foreground'
                  : 'border-muted bg-muted/30 hover:bg-muted/50'
              }`}
            >
              <div className="flex items-center gap-3">
                <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                  selectedAnswers[currentQuestion] === index
                    ? 'border-primary bg-primary text-primary-foreground'
                    : 'border-muted-foreground'
                }`}
                >
                  {selectedAnswers[currentQuestion] === index && (
                    <div className="w-2 h-2 bg-primary-foreground rounded-full" />
                  )}
                </div>
                <span>{option}</span>
              </div>
            </button>
          ))}
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button
          variant="outline"
          onClick={handlePrevious}
          disabled={currentQuestion === 0}
        >
          Previous
        </Button>

        <Button
          onClick={handleNext}
          disabled={selectedAnswers[currentQuestion] === undefined}
        >
          {currentQuestion === quizQuestions.length - 1 ? 'Finish Quiz' : 'Next'}
        </Button>
      </div>
    </div>
  );
}
